package goodsprice.ui;

import goodsprice.control.DataControl;
import goodsprice.impoexpo.ExportImport;
import goodsprice.io.FileIOImpl;
import goodsprice.io.PersistenceManager;
import goodsprice.model.Good;
import goodsprice.views.IListView;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.WindowEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import javax.swing.border.TitledBorder;
import goodsprice.control.IDataControl;

/**
 *
 * @author Raitis
 */
public class ListView extends javax.swing.JFrame implements IListView, IToolsJDialogCallbacks {

    private String[] listViewItems;
    private IDataControl vcallBack;
    private int selectedIdx = -1;
    private ToolsJDialog toolsDlg;
    private List<String> names;
    private List<String> shops;
    private AddEditDlg addEditDlg;
    private ConfirmDialog confirm;
    private SwingWorker<Void, Void> worker1;
    private SwingWorker<Good, Void> worker2;

    /**
     * Creates new form ListView
     *
     * @param vcallBack
     */
    public ListView(IDataControl vcallBack) {
        initComponents();
        this.vcallBack = vcallBack;
    }

    public void setCallBack(IDataControl vcallBack) {
        this.vcallBack = vcallBack;
    }

    public IDataControl getCallBack() {
        return vcallBack;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        jBtnAdd = new javax.swing.JButton();
        jBtnUpdate = new javax.swing.JButton();
        jBtnDelete = new javax.swing.JButton();
        jBtnReport = new javax.swing.JButton();
        jBtnTools = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Goods");

        jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseClickedOnListItem(evt);
            }
        });
        jScrollPane1.setViewportView(jList);

        jBtnAdd.setText("Add");
        jBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddActionPerformed(evt);
            }
        });

        jBtnUpdate.setText("Update");
        jBtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnUpdateActionPerformed(evt);
            }
        });

        jBtnDelete.setText("Delete");
        jBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteActionPerformed(evt);
            }
        });

        jBtnReport.setText("Report");
        jBtnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnReportActionPerformed(evt);
            }
        });

        jBtnTools.setText("Tools");
        jBtnTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnToolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jBtnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnUpdate)
                        .addGap(82, 82, 82)
                        .addComponent(jBtnReport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnTools)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnAdd)
                    .addComponent(jBtnUpdate)
                    .addComponent(jBtnDelete)
                    .addComponent(jBtnReport)
                    .addComponent(jBtnTools))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Good _prepareUpdateData(int idx) throws IndexOutOfBoundsException {
        names = prepareNamesLst();
        shops = prepareShopsLst();
        Good good = vcallBack.getItem(idx);
        return good;
    }

    private void openUpdateDialog(Good good, int idx) {
        addEditDlg = new AddEditDlg(this, true);
        addEditDlg.setTitle("Update Item");
        try {

            addEditDlg.fillInFields(good, names, shops);
        } catch (IndexOutOfBoundsException | ParseException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
            addEditDlg.dispose();
            return;
        }
        addEditDlg.setScallBack(new ISaveActionCallBack() {
            @Override
            public void saveAction(Good good) {
                if (vcallBack != null) {
                    try {
                        SW_Task_saveUpdate(idx, good);
                    } catch (Exception ex) {
                        Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                        // addEditDlg.dispose();
                        // showInfoDialog("Error", ex.getMessage());
                    }
                } else {
                    addEditDlg.dispose();
                }
            }

        });
        addEditDlg.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                addEditDlg.dispose();
            }
        });
        addEditDlg.setVisible(true);
    }

    /**
     * Update selected list item
     *
     * @param idx item Selected
     */
    private void updateItem(int idx) {
        if (vcallBack == null || idx == -1) {
            return;
        }

        try {
            SW_Task_prepareDataForUpdate(idx);

        } catch (IndexOutOfBoundsException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());

        } catch (Exception ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        }

    }

    private void setSelected(int idx) {
        int sz = jList.getModel().getSize();
        jList.setSelectedIndex(idx);
    }

    private void _prepareNamesShopsLists() {
        names = prepareNamesLst();
        shops = prepareShopsLst();
        // dlg.fillInFields(new Good(), prepareNamesLst(), prepareShopsLst());
    }

    /*private void addEditDlgSaveAction(Good good) throws IOException {
    ListView.this.vcallBack.add(good);
    setAddedAsSelected(good);
    }*/
    private void openAddEditDialog() {

        addEditDlg = new AddEditDlg(this, true);
        addEditDlg.setTitle("Add new Item");
        try {

            addEditDlg.fillInFields(new Good(), names, shops);
        } catch (ParseException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            addEditDlg.dispose();
            showInfoDialog("Error", ex.getMessage());
            return;
        }
        addEditDlg.setScallBack(new ISaveActionCallBack() {
            @Override
            public void saveAction(Good good) {
                addEditDlg.dispose();
                if (ListView.this.vcallBack != null) {
                    try {
                        //addEditDlgSaveAction(good);
                        SW_Task_saveAddEditDialog(good);
                    } catch (Exception ex) {
                        Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                        showInfoDialog("Error", ex.getMessage());
                        //addEditDlg.dispose();
                    }
                }

            }

        });
       
        addEditDlg.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
        addEditDlg.dispose();
        }
        });
        addEditDlg.setVisible(true);
       
    }
    private void jBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddActionPerformed

        try {
            SW_Task_prepareDataForAdd();
        } catch (Exception ex) {
            showInfoDialog("Error", ex.getMessage());
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jBtnAddActionPerformed

    private void setAddedAsSelected(Good good) {
        //If i want to select the added item then i have to find it in the list
        //because the list is always sorted by date. So, the added item will
        //not always be the last one in the list.
        int sz = jList.getModel().getSize();
        List<Good> lst = vcallBack.getListFromDataControlMemory();
        if (lst.contains(good)) {
            int idx = lst.indexOf(good);
            this.selectedIdx = idx;
            jList.setSelectedIndex(this.selectedIdx);
        }
        /*if(sz > 0){
        this.selectedIdx= sz-1;
        jList.setSelectedIndex(this.selectedIdx);
        }else{
        this.selectedIdx = -1;
        }*/
    }

    private void mouseClickedOnListItem(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClickedOnListItem
        System.out.println("goodsprice.ui.ListView.mouseClickedOnListItem(): " + evt.getSource());
        JList list = (JList) evt.getSource();
        this.selectedIdx = list.locationToIndex(evt.getPoint());

        if (evt.getClickCount() == 2) {

            System.out.println("index: " + selectedIdx);
            updateItem(selectedIdx);
        }
    }//GEN-LAST:event_mouseClickedOnListItem

    private void jBtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnUpdateActionPerformed
        if (selectedIdx == -1) {
            return;
        }
        updateItem(selectedIdx);
    }//GEN-LAST:event_jBtnUpdateActionPerformed

    private void jBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteActionPerformed
        if (selectedIdx == -1) {
            return;
        }
        confirmDeleteItem(selectedIdx);
    }//GEN-LAST:event_jBtnDeleteActionPerformed

    private void jBtnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnReportActionPerformed
        List<Good> goods = vcallBack.getListFromDataControlMemory();

        showReportDialog(goods);
    }//GEN-LAST:event_jBtnReportActionPerformed

    private void jBtnToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnToolsActionPerformed
        toolsDlg = new ToolsJDialog(this, true, this);
        toolsDlg.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                toolsDlg.dispose();
            }

        });
        toolsDlg.setVisible(true);
    }//GEN-LAST:event_jBtnToolsActionPerformed

    private void showReportDialog(List<Good> goods) {
        ReportDialog dialog = new ReportDialog(goods, this, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dialog.dispose();
            }
        });

        // dialog.setInfoText(txt);
        dialog.setVisible(true);
    }

    private void showConfirmDialog(String title, String txt) {
        confirm = new ConfirmDialog(txt, this, true, null);
        confirm.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                confirm.dispose();
            }
        });
        confirm.setCallBack(new IConfirmCallBackHandler() {
            @Override
            public void handler(boolean result) {
                if (result) {
                    try {
                        // deleteItem(selectedIdx);
                        SW_Task_deleteItem(selectedIdx);
                    } catch (Exception ex) {
                        Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                confirm.dispose();
            }
        });

        confirm.setTitle(title);
        // dialog.setInfoText(txt);
        confirm.setVisible(true);

    }

    private void showInfoDialog(String title, String txt) {

        InfoDialog dialog = new InfoDialog(/*new javax.swing.JFrame()*/this, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dialog.dispose();
            }
        });
        dialog.setTitle(title);
        dialog.setInfoText(txt);
        dialog.setVisible(true);
    }

    private void prepareListViewItems(List<Good> goods) {
        //String[] listViewItems= new String[goods.size()];
        listViewItems = new String[goods.size()];
        int i = 0;
        for (Good item : goods) {
            listViewItems[i] = item.toString();
            i++;
        }
        jList.setModel(new javax.swing.AbstractListModel<String>() {
            //String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() {
                return listViewItems.length;
            }

            public String getElementAt(int i) {
                return listViewItems[i];
            }
        });

    }

    @Override
    public void updateListView(List<Good> goods) {
        // List<Good> sortedGoods = sortByDate(goods);
        prepareListViewItems(goods);

    }

    public void getListAndUpdateView() {
        try {
            List<Good> lst = vcallBack.getList();
            updateListView(lst);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        }
    }

    private void confirmDeleteItem(int selectedIdx) {
        Good good = null;
        try {
            if (selectedIdx < 0) {
                return;
            }
            //good = vcallBack.getItem(selectedIdx);
            SW_Task_getItem(selectedIdx);
        } catch (IndexOutOfBoundsException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        }

    }

    /**
     * Not used anymore
     *
     * @param selectedIdx
     */
    private void deleteItem(int selectedIdx) {
        try {
            vcallBack.del(selectedIdx);
        } catch (IOException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        }

        if (selectedIdx >= 0) {
            if (selectedIdx == 0 && jList.getModel().getSize() > 0) {
                this.selectedIdx = jList.getModel().getSize() - 1;
            } else {
                this.selectedIdx--;
            }
            jList.setSelectedIndex(this.selectedIdx);
        }

    }

    private List<String> prepareNamesLst() {
        List<Good> goods = null;
        List<String> names = new ArrayList<>();
        if (vcallBack == null) {

            return names;
        } else {
            goods = vcallBack.getListFromDataControlMemory();
        }
        for (Good good : goods) {
            if (!names.contains(good.getName())) {
                names.add(good.getName());
            }
        }
        return names;
    }

    private List<String> prepareShopsLst() {
        List<String> shops = new ArrayList<>();
        List<Good> goods = null;
        if (vcallBack != null) {
            goods = vcallBack.getListFromDataControlMemory();
        } else {
            return shops;
        }
        for (Good good : goods) {
            if (!shops.contains(good.getShop())) {
                shops.add(good.getShop());
            }
        }
        return shops;
    }

    @Override
    public void filePathSelectedExport(String filePath) {

        toolsDlg.dispose();
        System.out.println("goodsprice.ui.ListView.filePathSelectedExport(): " + filePath);
        if (filePath == null || filePath.isEmpty()) {
            return; //Canceled....
        }
        try {
            SW_TASK_exportData(filePath);
            // vcallBack.exportData(filePath);
            //} catch (FileNotFoundException | UnsupportedEncodingException ex) {
        } catch (Exception ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);

        }

    }

    @Override
    public void filePathSelectedImport(String filePath) {
        toolsDlg.dispose();
        System.out.println("goodsprice.ui.ListView.filePathSelectedImport(): " + filePath);
        if (filePath == null || filePath.isEmpty()) {
            return; //Canceled....
        }
        try {
            // vcallBack.importData(filePath);
            SW_TASK_importData(filePath);
        } catch (Exception ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);

        }

    }
@Override
    public IDataControl getDataControlInterface() {
        return vcallBack;    
    }

    ////////////////// Workers /////////////////////////////
    JFrame progressBar(String title) {
        JFrame f = new JFrame(title);
        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        Container content = f.getContentPane();
        JProgressBar progressBar = new JProgressBar();
        //progressBar.setValue(25);
        progressBar.setIndeterminate(true);
        // progressBar.setStringPainted(true);
        TitledBorder border = BorderFactory.createTitledBorder("Please wait...");
        progressBar.setBorder(border);
        content.add(progressBar, BorderLayout.NORTH);
        f.setSize(350, 100);
        f.setAlwaysOnTop(true);
        f.setVisible(true);
        
        return f;
    }

    public boolean isWorkersActive() {
        boolean w1 = true;
        boolean w2 = true;
       // System.out.println("isWorkersActive():  " + worker1 + " : " + worker2);
        //System.out.println("isWorkersActive()Done? :  "+worker1+" : "+worker2);
        if (worker1 == null && worker2 == null) {
            return false;
        }
        if (worker1 != null && worker1.isDone()) {
            w1 = false;
        }
        if (worker2 != null && worker2.isDone()) {
            w2 = false;
        }
       // System.out.println("isWorkersActive():  " + (w1 || w2));
        return (w1 || w2);
    }

    void SW_Task_prepareDataForAdd() throws Exception {
        worker1 = new SwingWorker<Void, Void>() {
            JFrame progress;

            @Override
            protected Void doInBackground() throws Exception {
                progress = progressBar("Prepare Add...");
                _prepareNamesShopsLists();

                return null;
            }

            @Override
            protected void done() {

                worker1 = null; //IMPORTANT: put here!!
                progress.dispose();
                openAddEditDialog();

            }

        };
        worker1.execute();

    }

    void SW_Task_saveAddEditDialog(Good good) throws Exception {
        worker1 = new SwingWorker<Void, Void>() {
            JFrame progress;

            @Override
            protected Void doInBackground() throws Exception {

                if (ListView.this.vcallBack != null) {
                    try {
                        progress = progressBar("Saving data...");

                        // for Test ==============
                        /*System.out.println("Sleeping 10 sec!");
                        Thread.sleep(10000);
                        System.out.println("Sleeping DONE.......!");*/

                        ListView.this.vcallBack.add(good);
                        setAddedAsSelected(good);
                    } catch (IOException ex) {
                        progress.dispose();//IMPORTANT!!! before call showInfoDialog()
                        Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                        worker1 = null;
                        showInfoDialog("Error", ex.getMessage());
                    }
                }

                return null;

            }

            @Override
            protected void done() {
                System.out.println("SW_Task_saveAddEditDialog.done()..............");
                progress.dispose();
                worker1 = null;
            }

        };
        worker1.execute();
    }

    void SW_Task_prepareDataForUpdate(int idx) throws Exception {
        worker2 = new SwingWorker<Good, Void>() {
            JFrame progress;

            @Override
            protected Good doInBackground() throws Exception {
                progress = progressBar("Prepare Update...");
                Good good = _prepareUpdateData(idx);

                return good;
            }

            @Override
            protected void done() {

                progress.dispose();
                Good good;
                try {
                    good = get();
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    showInfoDialog("Error", ex.getMessage());
                    worker2 = null;
                    return;
                }
                worker2 = null;
                openUpdateDialog(good, idx);

            }

        };
        worker2.execute();

    }

    void SW_Task_saveUpdate(int idx, Good good) throws Exception {
        worker1 = new SwingWorker<Void, Void>() {
            JFrame progress;

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    progress = progressBar("Saving data...");
                    ListView.this.vcallBack.edit(idx, good);

                } catch (IOException ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    done(); //IMPORTANT!!! done() before call showInfoDialog()
                    showInfoDialog("Error", ex.getMessage());

                }

                return null;

            }

            @Override
            protected void done() {
                worker1 = null;
                progress.dispose();
                addEditDlg.dispose();
                setSelected(idx);

            }

        };
        worker1.execute();
    }

    void SW_Task_getItem(int idx) throws Exception {
        worker2 = new SwingWorker<Good, Void>() {
            JFrame progress;

            @Override
            protected Good doInBackground() throws Exception {
                progress = progressBar("Preparing...");
                Good good = null;
                try {
                    good = vcallBack.getItem(idx);
                } catch (IndexOutOfBoundsException ex) {
                    progress.dispose();
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    showInfoDialog("Error", ex.getMessage());
                }
                return good;
            }

            @Override
            protected void done() {

                progress.dispose();
                Good good;

                try {
                    good = get();
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    worker2 = null;
                    return;
                }

                worker2 = null;
                showConfirmDialog(
                        "Confirm to delete",
                        String.format("Delete Item %d : %s", idx, good.toString()));

            }

        };
        worker2.execute();

    }

    void SW_Task_deleteItem(int idx) throws Exception {
        worker1 = new SwingWorker<Void, Void>() {
            JFrame progress;

            @Override
            protected Void doInBackground() throws Exception {
                progress = progressBar("Deleting...");
                try {
                    vcallBack.del(idx);
                } catch (IOException ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    worker1 = null;
                    progress.dispose();
                    showInfoDialog("Error", ex.getMessage());
                }

                return null;
            }

            @Override
            protected void done() {
                worker1 = null;
                progress.dispose();
                //confirm.dispose();
                if (idx >= 0) {
                    if (idx == 0 && jList.getModel().getSize() > 0) {
                        selectedIdx = jList.getModel().getSize() - 1;
                    } else {
                        selectedIdx--;
                    }
                    jList.setSelectedIndex(selectedIdx);
                }

            }

        };
        worker1.execute();

    }

    void SW_TASK_exportData(String filePath) throws Exception {
        worker1 = new SwingWorker<Void, Void>() {
            JFrame progress = null;
            boolean error = false;

            @Override
            protected Void doInBackground() throws Exception {
                progress = progressBar("Exporting...");
                try {
                    vcallBack.exportData(filePath);
                } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    worker1 = null;
                    progress.dispose();
                    //worker1.cancel(false);
                    error = true;
                    showInfoDialog("Error", ex.getMessage());

                }
                return null;
            }

            @Override
            protected void done() {
                worker1 = null;
                progress.dispose();
                if (!error) {
                    showInfoDialog("Info", "Data has been exported.");
                }
            }

        };
        worker1.execute();
    }

    void SW_TASK_importData(String filePath) throws Exception {
        worker1 = new SwingWorker<Void, Void>() {
            JFrame progress = null;
            boolean error = false;

            @Override
            protected Void doInBackground() throws Exception {
                progress = progressBar("Importing...");
                try {
                    vcallBack.importData(filePath);
                } catch (Exception ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    worker1 = null;
                    progress.dispose();
                    //worker1.cancel(false);
                    error = true;
                    showInfoDialog("Error", ex.getMessage());
                }
                return null;
            }

            ;

           @Override
            protected void done() {
                worker1 = null;
                progress.dispose();
                if (!error) {
                    showInfoDialog("Info", "Data has been imported.");
                    
                }
            }

        };
        worker1.execute();
    }
    ////////////////////End Workers//////////////////////////

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAdd;
    private javax.swing.JButton jBtnDelete;
    private javax.swing.JButton jBtnReport;
    private javax.swing.JButton jBtnTools;
    private javax.swing.JButton jBtnUpdate;
    private javax.swing.JList<String> jList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws java.lang.ClassNotFoundException
     */
    public static void main(String args[]) throws IOException, ClassNotFoundException {

        ListView lv = new ListView(null);

        FileIOImpl<Good> fileIO = new FileIOImpl<>("Goods.bin");

        PersistenceManager<Good> pm = new PersistenceManager<>(fileIO);

        DataControl control = new DataControl(pm, lv);

        lv.setCallBack(control);
        ExportImport impoExpo = new ExportImport();
        control.setExpImp(impoExpo);

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                lv.setVisible(true);
                lv.getListAndUpdateView();

            }
        });
    }

    
}
