
package goodsprice.ui;

import goodsprice.model.Good;
import goodsprice.tcp.Status;
import goodsprice.tcp.TcpClient;
import goodsprice.tcp.TcpServer;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author Raitis
 */
public class TcpClientJDialog extends javax.swing.JDialog {

    private SwingWorker<Void, Void> worker1;
    private TcpClient tcpClient;
    private final IToolsJDialogCallbacks callback;
    private String hostIp;
    private int port;
  
   
    
    
    /**
     * Creates new form TcpClientJDialog
     */
    public TcpClientJDialog(java.awt.Frame parent, boolean modal,  IToolsJDialogCallbacks callBack) {
        super(parent, modal);
         this.callback = callBack;
        initComponents();
        JtxtIp.setText("");
        jTxtPort.setText("");
        progressBar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        JtxtIp = new javax.swing.JTextField();
        jTxtPort = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtStatus = new javax.swing.JTextArea();
        jBtnReceiver = new javax.swing.JButton();
        jBtnSender = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Client");
        setPreferredSize(new java.awt.Dimension(470, 300));

        progressBar.setIndeterminate(true);

        JtxtIp.setText("jTextField1");
        JtxtIp.setToolTipText("Host name or IP address");

        jTxtPort.setText("port");
        jTxtPort.setToolTipText("Port");

        jTxtStatus.setColumns(20);
        jTxtStatus.setRows(5);
        jScrollPane1.setViewportView(jTxtStatus);

        jBtnReceiver.setText("Receive");
        jBtnReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnReceiverActionPerformed(evt);
            }
        });

        jBtnSender.setText("Send");
        jBtnSender.setMaximumSize(new java.awt.Dimension(71, 25));
        jBtnSender.setMinimumSize(new java.awt.Dimension(71, 25));
        jBtnSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSenderActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Cancel");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnReceiver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnSender, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 10, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(JtxtIp, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTxtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(97, 97, 97))
                            .addComponent(jBtnCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JtxtIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnReceiver)
                    .addComponent(jBtnSender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBtnCancel)
                .addGap(0, 29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnReceiverActionPerformed
        jBtnSender.setEnabled(false);
        jBtnReceiver.setEnabled(false);
       
        if(isValidInputs()){
        runClientReceiver();
        }
    }//GEN-LAST:event_jBtnReceiverActionPerformed

    private void jBtnSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSenderActionPerformed
       
        jBtnSender.setEnabled(false);
        jBtnReceiver.setEnabled(false);
        if(isValidInputs()){
           runClientSender();
        }
    }//GEN-LAST:event_jBtnSenderActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        if(tcpClient !=null ){
          try {
              tcpClient.getSocket().close();
              tcpClient=null;
          } catch (IOException ex) {
              Logger.getLogger(TcpClientJDialog.class.getName()).log(Level.SEVERE, null, ex);
              jTxtStatus.setText("ERROR: "+ex.getMessage());
              resetClientInfo();
              return;
          }
          jTxtStatus.setText(jTxtStatus.getText()+"\nClient canceled");
          resetClientInfo();
      }
    }//GEN-LAST:event_jBtnCancelActionPerformed

    private void resetClientInfo() {
      tcpClient= null;
      worker1=null;
     
      jBtnReceiver.setEnabled(true);
      jBtnSender.setEnabled(true);
    }
    /**
     * Validate host address and port. If valid retrieve those values.
     * @return true if valid , the results are saved in fields HostIp, port.
     * Otherwise false.
     */
    private boolean isValidInputs(){
     
       hostIp = JtxtIp.getText().trim();
      
        try {
            port = Integer.parseInt(jTxtPort.getText().trim());
        } catch (NumberFormatException ex) {
            Logger.getLogger(TcpClientJDialog.class.getName()).log(Level.SEVERE, null, ex);
             jTxtStatus.setText("ERROR: "+ex.getMessage());
             jTxtStatus.setText("Error: Wrong port number format!");
            //jTxtPort
            return false;
        }
        if( !TcpServer.isAcceptablePort(port)){
            jTxtStatus.setText("Error: Wrong port range!");
            return false;
        }
        return true;
    }
    
    private void runClientReceiver() {
    
        tcpClient= new TcpClient(hostIp,port,Status.RECEIVER);
        
        setTitle("Client Receiver");
        String txt;
        String msg="Please, run server sender on other side.";
       
            txt= String.format("Client %s port %d waiting for acceptance...\n%s", 
                    hostIp, port, msg);
        		
        jTxtStatus.setText(txt);
        try {
            SW_TASK_ClientReceiver();
        } catch (Exception ex) {
            Logger.getLogger(TcpClientJDialog.class.getName()).log(Level.SEVERE, null, ex);
             jTxtStatus.setText("ERROR: "+ex.getMessage());
            resetClientInfo();
        }
    }
    
    private void runClientSender() {
        tcpClient= new TcpClient(hostIp,port,Status.SENDER);
        List<Good> goods = callback.getDataControlInterface().getListFromDataControlMemory();
        tcpClient.setGoods(goods);
        
        setTitle("Client Sender");
        String txt;
        String msg="Please, run server receiver on other side.";
       
            txt= String.format("Client %s port %d waiting for acceptance...\n%s", 
                    hostIp, port, msg);
        		
        jTxtStatus.setText(txt);
        try {
            SW_TASK_ClientSender();
        } catch (Exception ex) {
            Logger.getLogger(TcpClientJDialog.class.getName()).log(Level.SEVERE, null, ex);
             jTxtStatus.setText("ERROR: "+ex.getMessage());
            resetClientInfo();
        }
    }
    
    
    ///////////////////////Workers/////////////////////
    
    public boolean isTaskRunning() {
      
        return worker1 != null;

    }
    
    void SW_TASK_ClientReceiver() throws Exception {
        worker1 = new SwingWorker<Void, Void>() {

            boolean error = false;
            private List<Good> goods;
           

            @Override
            protected Void doInBackground() throws Exception {
               
                tcpClient.run();
                
                return null;
            }

            @Override
            protected void done() {
                /*
                Warning!
                tcpClient.run does not throw an exception (all exceptions are catched 
                internally). So, in done() the checking for an error must be done carefully.
                Status.ERROR and Status.COMPLETED must be used to be sure is Done()
                completed  successfully or not.
                */
                worker1 = null;
                 progressBar.setVisible(false);
                if (tcpClient.getStatus() == Status.ERROR) {
                    jTxtStatus.setText("Error: " + tcpClient.getError());
                } else {
                 jTxtStatus.setText(jTxtStatus.getText()+"\nReceiving is Completed!");
                }
                
                    goods = tcpClient.getGoods(); //null in case of error
                
                //Important! See comment above
                if(tcpClient.getStatus()==Status.COMPLETED){
                    try {
                       callback.getDataControlInterface().importData(goods);
                       
                    } catch (IOException ex) {
                        Logger.getLogger(TcpClientJDialog.class.getName()).log(Level.SEVERE, null, ex);
                         jTxtStatus.setText(jTxtStatus.getText()+"\n"+ex.getMessage());
                    }
                }
                resetClientInfo();
            }

        };
        worker1.execute();
    }
    
    private void SW_TASK_ClientSender() {
        worker1 = new SwingWorker<Void, Void>() {

            boolean error = false;
            

            @Override
            protected Void doInBackground() throws Exception {
               
                tcpClient.run();
                
                return null;
            }

            @Override
            protected void done() {
                /*
                Warning!
                tcpClient.run does not throw an exception (all exceptions are catched 
                internally). So, in done() the checking for an error must be done carefully.
                Status.ERROR and Status.COMPLETED must be used to be sure is Done()
                completed  successfully or not.
                */
                worker1 = null;
                 progressBar.setVisible(false);
                if (tcpClient.getStatus() == Status.ERROR) {
                    jTxtStatus.setText("Error: " + tcpClient.getError());
                } else {
                 jTxtStatus.setText(jTxtStatus.getText()+"\nSending is Completed!");
                }
                
                    
                resetClientInfo();
            }

        };
        worker1.execute();
    }
    
    //////////////////////End Workers////////////////////////////
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TcpClientJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TcpClientJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TcpClientJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TcpClientJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TcpClientJDialog dialog = new TcpClientJDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JtxtIp;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnReceiver;
    private javax.swing.JButton jBtnSender;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTxtPort;
    private javax.swing.JTextArea jTxtStatus;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    

    

    
}
