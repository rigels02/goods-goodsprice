
package goodsprice.ui;

import goodsprice.model.Good;
import goodsprice.tcp.ITcpEventSender;
import goodsprice.tcp.Status;
import goodsprice.tcp.TcpServer;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingWorker;

/**
 *
 * @author Raitis
 */
public class TcpServerJDialog extends javax.swing.JDialog implements ITcpEventSender {

    private SwingWorker<Void, Void> worker1;
    private TcpServer tcpServer;
    private final IToolsJDialogCallbacks callback;

    /**
     * Creates new form TcpServerJDialog
     */
    public TcpServerJDialog(java.awt.Frame parent, boolean modal, IToolsJDialogCallbacks callBack) {
        super(parent, modal);
        this.callback = callBack;
        initComponents();
        progressBar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtStatus = new javax.swing.JTextArea();
        jBtnReceiver = new javax.swing.JButton();
        jBtnSender = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Server");

        jTxtStatus.setEditable(false);
        jTxtStatus.setColumns(20);
        jTxtStatus.setRows(5);
        jScrollPane1.setViewportView(jTxtStatus);

        jBtnReceiver.setText("Receiver");
        jBtnReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnReceiverActionPerformed(evt);
            }
        });

        jBtnSender.setText("Sender");
        jBtnSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSenderActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Cancel");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        progressBar.setIndeterminate(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBtnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBtnReceiver)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtnSender)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnReceiver)
                    .addComponent(jBtnSender))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jBtnCancel)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnReceiverActionPerformed
    
        jBtnSender.setEnabled(false);
        jBtnReceiver.setEnabled(false);
        runServerReceiver();
    }//GEN-LAST:event_jBtnReceiverActionPerformed

    private void jBtnSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSenderActionPerformed
        jBtnSender.setEnabled(false);
        jBtnReceiver.setEnabled(false);
        runServerSender();
    }//GEN-LAST:event_jBtnSenderActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
      if(tcpServer !=null ){
          try {
              tcpServer.getServerSocket().close();
              tcpServer=null;
          } catch (IOException ex) {
              Logger.getLogger(TcpServerJDialog.class.getName()).log(Level.SEVERE, null, ex);
              jTxtStatus.setText("ERROR: "+ex.getMessage());
              resetServerInfo();
              return;
          }
          jTxtStatus.setText(jTxtStatus.getText()+"\nServer canceled");
          resetServerInfo();
      }
    }//GEN-LAST:event_jBtnCancelActionPerformed

    private void resetServerInfo() {
      tcpServer= null;
      worker1=null;
      jBtnReceiver.setEnabled(true);
      jBtnSender.setEnabled(true);
    }
    /*private void showInfoDialog(String title, String txt) {
    
    InfoDialog dialog = new InfoDialog(this, true);
    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
        dialog.dispose();
    }
    });
    dialog.setTitle(title);
    dialog.setInfoText(txt);
    dialog.setVisible(true);
}*/
    
    private void runServerSender() {
        tcpServer= new TcpServer(0,Status.SENDER);
         int port = TcpServer.getRandomPortNumber();
         tcpServer.setServerPort(port);
         
       
        TcpServerJDialog.this.setTitle("Server Sender");
        String txt;
        String msg="Please, run client receiver on other side.";
        try {
            txt= String.format("Server %s port %d waiting for connection...\n%s", 
                    tcpServer.getServerHostAddress(), port, msg);
        } catch (UnknownHostException ex) {
            Logger.getLogger(TcpServerJDialog.class.getName()).log(Level.SEVERE, null, ex);
            jTxtStatus.setText("ERROR: "+ex.getMessage());
            resetServerInfo();
            return;
        }
        
			
        jTxtStatus.setText(txt);
        List<Good> goods = callback.getDataControlInterface().getListFromDataControlMemory();
        tcpServer.setGoods(goods);
         
        try {
            SW_TASK_ServerSender();
        } catch (Exception ex) {
            Logger.getLogger(TcpServerJDialog.class.getName()).log(Level.SEVERE, null, ex);
             jTxtStatus.setText("ERROR: "+ex.getMessage());
             resetServerInfo();
        }
    }
    
    @Override
    public void connectionAccepted() {
        jTxtStatus.setText(jTxtStatus.getText()+ "\nData transfer started");
        progressBar.setVisible(true);
    }
    
    private void runServerReceiver() {
       tcpServer= new TcpServer(0,Status.RECEIVER);
         int port = TcpServer.getRandomPortNumber();
         tcpServer.setServerPort(port);
         
       
        TcpServerJDialog.this.setTitle("Server Receiver");
        String txt;
        String msg="Please, run client sender on other side.";
        try {
            txt= String.format("Server %s port %d waiting for connection...\n%s", 
                    tcpServer.getServerHostAddress(), port, msg);
        } catch (UnknownHostException ex) {
            Logger.getLogger(TcpServerJDialog.class.getName()).log(Level.SEVERE, null, ex);
            jTxtStatus.setText("ERROR: "+ex.getMessage());
            resetServerInfo();
            return;
        }
        jTxtStatus.setText(txt);
        try {
            SW_TASK_ServerReceiver();
        } catch (Exception ex) {
            Logger.getLogger(TcpServerJDialog.class.getName()).log(Level.SEVERE, null, ex);
             jTxtStatus.setText("ERROR: "+ex.getMessage());
             resetServerInfo();
        }
    }
    ///////////////////////Workers/////////////////////
    
    public boolean isTaskRunning(){
      if(worker1 != null) return true;
      return false;
    }
    void SW_TASK_ServerSender() throws Exception {
        worker1 = new SwingWorker<Void, Void>() {

            boolean error = false;

            @Override
            protected Void doInBackground() throws Exception {
               
                tcpServer.run();

                return null;
            }

            @Override
            protected void done() {
                worker1 = null;
                 progressBar.setVisible(false);
                if (tcpServer.getStatus() == Status.ERROR) {
                    jTxtStatus.setText("Error: " + tcpServer.getError());
                } else {
                 jTxtStatus.setText(jTxtStatus.getText()+"\nSending is Completed!");
                }
                resetServerInfo();
            }

            

        };
        worker1.execute();
    }
    
    private void SW_TASK_ServerReceiver() {
       worker1 = new SwingWorker<Void, Void>() {

            boolean error = false;
            private List<Good> goods;
           

            @Override
            protected Void doInBackground() throws Exception {
               
                tcpServer.run();
                
                return null;
            }

            @Override
            protected void done() {
                /*
                Warning!
                tcpClient.run does not throw an exception (all exceptions are catched 
                internally). So, in done() the checking for an error must be done carefully.
                Status.ERROR and Status.COMPLETED must be used to be sure is Done()
                completed  successfully or not.
                */
                worker1 = null;
                 progressBar.setVisible(false);
                if (tcpServer.getStatus() == Status.ERROR) {
                    jTxtStatus.setText("Error: " + tcpServer.getError());
                } else {
                 jTxtStatus.setText(jTxtStatus.getText()+"\nReceiving is Completed!");
                }
                
                    goods = tcpServer.getGoods(); //null in case of error
                
                //Important! See comment above
                if(tcpServer.getStatus()==Status.COMPLETED){
                    try {
                       callback.getDataControlInterface().importData(goods);
                       
                    } catch (IOException ex) {
                        Logger.getLogger(TcpClientJDialog.class.getName()).log(Level.SEVERE, null, ex);
                         jTxtStatus.setText(jTxtStatus.getText()+"\n"+ex.getMessage());
                    }
                }
                resetServerInfo();
            }

        };
        worker1.execute();
    }
    
    
    //////////////////////End Workers////////////////////////////
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TcpServerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TcpServerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TcpServerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TcpServerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TcpServerJDialog dialog = new TcpServerJDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnReceiver;
    private javax.swing.JButton jBtnSender;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTxtStatus;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    

    

    
}
