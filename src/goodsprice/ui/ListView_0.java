
package goodsprice.ui;

import goodsprice.control.DataControl;
import goodsprice.impoexpo.ExportImport;
import goodsprice.io.FileIOImpl;
import goodsprice.io.PersistenceManager;
import goodsprice.model.Good;
import goodsprice.ui.AddEditDlg;
import goodsprice.ui.ConfirmDialog;
import goodsprice.ui.IConfirmCallBackHandler;
import goodsprice.ui.ISaveActionCallBack;
import goodsprice.ui.IToolsJDialogCallbacks;
import goodsprice.ui.InfoDialog;
import goodsprice.ui.ListView;
import goodsprice.ui.ReportDialog;
import goodsprice.ui.ToolsJDialog;
import goodsprice.views.IListView;
import java.awt.event.WindowEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import goodsprice.control.IDataControl;

/**
 * 
 * THIS IS A ListView VERSION WITHOUT OF SwingWorker TASKS.
 * @author Raitis
 */
public class ListView_0 extends javax.swing.JFrame implements IListView, IToolsJDialogCallbacks{

    private String[] listViewItems;
    private  IDataControl vcallBack;
    private int selectedIdx = -1;
    private ToolsJDialog toolsDlg;

    /**
     * Creates new form ListView
     * @param vcallBack
     */
    public ListView_0(IDataControl vcallBack) {
        initComponents();
        this.vcallBack= vcallBack;
    }

    public void setCallBack(IDataControl vcallBack){
        this.vcallBack= vcallBack;
    }
    public IDataControl getCallBack(){
     return vcallBack;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        jBtnAdd = new javax.swing.JButton();
        jBtnUpdate = new javax.swing.JButton();
        jBtnDelete = new javax.swing.JButton();
        jBtnReport = new javax.swing.JButton();
        jBtnTools = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Goods");

        jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseClickedOnListItem(evt);
            }
        });
        jScrollPane1.setViewportView(jList);

        jBtnAdd.setText("Add");
        jBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddActionPerformed(evt);
            }
        });

        jBtnUpdate.setText("Update");
        jBtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnUpdateActionPerformed(evt);
            }
        });

        jBtnDelete.setText("Delete");
        jBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteActionPerformed(evt);
            }
        });

        jBtnReport.setText("Report");
        jBtnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnReportActionPerformed(evt);
            }
        });

        jBtnTools.setText("Tools");
        jBtnTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnToolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jBtnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnUpdate)
                        .addGap(82, 82, 82)
                        .addComponent(jBtnReport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnTools)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnAdd)
                    .addComponent(jBtnUpdate)
                    .addComponent(jBtnDelete)
                    .addComponent(jBtnReport)
                    .addComponent(jBtnTools))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Update selected list item
     * @param idx item Selected
     */
    private void updateItem(int idx){
        if(vcallBack == null || idx == -1){
           return ;
        }
        
        AddEditDlg addEditDlg = new AddEditDlg(this, true);
        addEditDlg.setTitle("Update Item");
        try {
            Good good = vcallBack.getItem(idx);
            addEditDlg.fillInFields(good,prepareNamesLst(),prepareShopsLst());
        } catch (IndexOutOfBoundsException | ParseException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
             showInfoDialog("Error", ex.getMessage());
             addEditDlg.dispose();
             return ;
        }
        addEditDlg.setScallBack(new ISaveActionCallBack() {
            @Override
            public void saveAction(Good good) {
            if(vcallBack != null) {
                try {
                    ListView_0.this.vcallBack.edit(idx, good);
                    setSelected(idx);
                } catch (IOException ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    showInfoDialog("Error", ex.getMessage());
                }
            }
            addEditDlg.dispose();
            }

           
        });
        addEditDlg.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                       addEditDlg.dispose();
                    }
        });
        addEditDlg.setVisible(true);
    }
    
     private void setSelected(int idx) {
            int sz = jList.getModel().getSize();
            jList.setSelectedIndex(idx);
     }
     
    private void jBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddActionPerformed
       
        AddEditDlg addEditDlg = new AddEditDlg(this, true);
        addEditDlg.setTitle("Add new Item");
        try {
            addEditDlg.fillInFields(new Good(), prepareNamesLst(), prepareShopsLst());
        } catch (ParseException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
             addEditDlg.dispose();
             return ;
        }
        addEditDlg.setScallBack(new ISaveActionCallBack() {
            @Override
            public void saveAction(Good good) {
            if(ListView_0.this.vcallBack != null) {
                try {
                    ListView_0.this.vcallBack.add(good);
                    setAddedAsSelected(good);
                } catch (IOException ex) {
                    Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
                    showInfoDialog("Error", ex.getMessage());
                }
            }
            addEditDlg.dispose();
            }

            
        });
        addEditDlg.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                       addEditDlg.dispose();
                    }
        });
        addEditDlg.setVisible(true);
    }//GEN-LAST:event_jBtnAddActionPerformed

    private void setAddedAsSelected(Good good) {
        //If i want to select the added item then i have to find it in the list
        //because the list is always sorted by date. So, the added item will
        //not always be the last one in the list.
        int sz = jList.getModel().getSize();
        List<Good> lst = vcallBack.getListFromDataControlMemory();
        if(lst.contains(good)){
            int idx = lst.indexOf(good);
            this.selectedIdx= idx;
            jList.setSelectedIndex(this.selectedIdx);
        }
        /*if(sz > 0){
        this.selectedIdx= sz-1;
        jList.setSelectedIndex(this.selectedIdx);
        }else{
        this.selectedIdx = -1;
        }*/
    }
    
    private void mouseClickedOnListItem(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClickedOnListItem
        System.out.println("goodsprice.ui.ListView.mouseClickedOnListItem(): "+evt.getSource());
         JList list = (JList)evt.getSource();
        this.selectedIdx= list.locationToIndex(evt.getPoint());
       
    if (evt.getClickCount() == 2) {
       
        System.out.println("index: "+selectedIdx);
        updateItem(selectedIdx);
    }
    }//GEN-LAST:event_mouseClickedOnListItem

    private void jBtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnUpdateActionPerformed
       if(selectedIdx == -1)
            return;
        updateItem(selectedIdx);
    }//GEN-LAST:event_jBtnUpdateActionPerformed

    private void jBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteActionPerformed
        if(selectedIdx == -1)
            return;
        confirmDeleteItem(selectedIdx);
    }//GEN-LAST:event_jBtnDeleteActionPerformed

    private void jBtnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnReportActionPerformed
       List<Good> goods = vcallBack.getListFromDataControlMemory();
        
        showReportDialog(goods);
    }//GEN-LAST:event_jBtnReportActionPerformed

    private void jBtnToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnToolsActionPerformed
        toolsDlg = new ToolsJDialog(this, true, this);
        toolsDlg.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
              toolsDlg.dispose();
            }

        });
        toolsDlg.setVisible(true);
    }//GEN-LAST:event_jBtnToolsActionPerformed

   private void showReportDialog( List<Good> goods) {
        ReportDialog dialog = new ReportDialog(goods,this,true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dialog.dispose();
            }
        });
       
       
        // dialog.setInfoText(txt);
        dialog.setVisible(true);
    }

    
    private void showConfirmDialog(String title, String txt) {
        ConfirmDialog dialog = new ConfirmDialog(txt, this, true, null);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dialog.dispose();
            }
        });
        dialog.setCallBack(new IConfirmCallBackHandler() {
            @Override
            public void handler(boolean result) {
                if(result){
                  deleteItem(selectedIdx);
                }
                dialog.dispose();
            }

            
        });
        dialog.setTitle(title);
        // dialog.setInfoText(txt);
        dialog.setVisible(true);
    }
    private void showInfoDialog(String title,String txt){
    
        InfoDialog dialog = new InfoDialog(/*new javax.swing.JFrame()*/ this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                       dialog.dispose();
                    }
                });
                dialog.setTitle(title);
                dialog.setInfoText(txt);
                dialog.setVisible(true);
    }
    
    private void prepareListViewItems(List<Good> goods) {
        //String[] listViewItems= new String[goods.size()];
        listViewItems = new String[goods.size()];
        int i = 0;
        for (Good item : goods) {
            listViewItems[i] = item.toString();
            i++;
        }
        jList.setModel(new javax.swing.AbstractListModel<String>() {
            //String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() {
                return listViewItems.length;
            }

            public String getElementAt(int i) {
                return listViewItems[i];
            }
        });
        
    }
    @Override
    public void updateListView(List<Good> goods) {
       // List<Good> sortedGoods = sortByDate(goods);
        prepareListViewItems(goods);
        
    }
    
   
    public void getListAndUpdateView(){
        try {
            List<Good> lst = vcallBack.getList();
            updateListView(lst);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        }
    }
    
     private void confirmDeleteItem(int selectedIdx) {
         Good good = null;
         try {
             if(selectedIdx < 0) return;
             good = vcallBack.getItem(selectedIdx);
         } catch (IndexOutOfBoundsException ex) {
              Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
         }
        showConfirmDialog(
                "Confirm to delete", 
                String.format("Delete Item %d : %s",selectedIdx,good.toString()));
        
    }
    
    private void deleteItem(int selectedIdx) {
        try {
            vcallBack.del(selectedIdx);
        } catch (IOException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        }
        
       
        if(selectedIdx >= 0){
        if(selectedIdx == 0 && jList.getModel().getSize()>0){
        this.selectedIdx = jList.getModel().getSize()-1;
        }else{
        this.selectedIdx--;
        }
          jList.setSelectedIndex(this.selectedIdx);
        }
        
    }
    private List<String> prepareNamesLst() {
        List<Good> goods = vcallBack.getListFromDataControlMemory();
        List<String> names= new ArrayList<>();
        for (Good good : goods) {
            if( !names.contains(good.getName())){
               names.add(good.getName());
            }
        }
        return names;
    }
    
    private List<String> prepareShopsLst() {
    
      List<Good> goods = vcallBack.getListFromDataControlMemory();
        List<String> shops= new ArrayList<>();
        for (Good good : goods) {
            if( !shops.contains(good.getShop())){
               shops.add(good.getShop());
            }
        }
        return shops;
    }
    
    @Override
    public void filePathSelectedExport(String filePath) {
      
        toolsDlg.dispose();
        System.out.println("goodsprice.ui.ListView.filePathSelectedExport(): "+filePath);
        if(filePath==null || filePath.isEmpty())
              return; //Canceled....
        try {
            vcallBack.exportData(filePath);
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
            return;
        }
        showInfoDialog("Info", "Data has been exported.");
    }
    
    @Override
    public void filePathSelectedImport(String filePath) {
        toolsDlg.dispose();
        System.out.println("goodsprice.ui.ListView.filePathSelectedImport(): "+filePath);
        try {
            vcallBack.importData(filePath);
        } catch (Exception ex) {
            Logger.getLogger(ListView.class.getName()).log(Level.SEVERE, null, ex);
            showInfoDialog("Error", ex.getMessage());
        }
        //save and update (also LitView view) is done via DataControl.saveAndUpdateView()
        //getListAndUpdateView();
        showInfoDialog("Info", "Data has been imported.");
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAdd;
    private javax.swing.JButton jBtnDelete;
    private javax.swing.JButton jBtnReport;
    private javax.swing.JButton jBtnTools;
    private javax.swing.JButton jBtnUpdate;
    private javax.swing.JList<String> jList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

   
    
      /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws java.lang.ClassNotFoundException
     */
    public static void main(String args[]) throws IOException, ClassNotFoundException {
        
        ListView_0 lv = new ListView_0(null);
        
        FileIOImpl<Good> fileIO = new FileIOImpl<>("Goods.bin");

        PersistenceManager<Good> pm = new PersistenceManager<>(fileIO);
        
        DataControl control = new DataControl(pm, lv);
        
        lv.setCallBack(control);
        ExportImport impoExpo = new ExportImport();
        control.setExpImp(impoExpo);
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
        
            public void run() {
                 lv.setVisible(true);
                lv.getListAndUpdateView();
               
            }
        });
    }

    @Override
    public IDataControl getDataControlInterface() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
}
